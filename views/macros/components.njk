{% from "govuk/components/error-message/macro.njk" import govukErrorMessage -%}
{% from "govuk/components/fieldset/macro.njk" import govukFieldset %}
{% from "govuk/components/hint/macro.njk" import govukHint %}
{% from "govuk/components/input/macro.njk" import govukInput %}

{% macro govukDateInputApprox(params) %}
{% set fieldErrors = params.casaErrors[params.namePrefix] %}
{% set hasSuffixHighlights = true if fieldErrors[0].focusSuffix.length else false %}

{%- set inputErrorClass %}
  {{ 'govuk-input--error' if fieldErrors }}
{% endset -%}

{# Build up attributes #}
{% set mergedAttributes = params.attributes or {} %}
{% if fieldErrors %}
  {% set mergedAttributes = mergeObjects(mergedAttributes, {
    'data-validation': {fn: params.namePrefix, va: fieldErrors[0].validator} | dump
  }) %}
{% endif %}
{# set visibleErrorMessage #}
{% if params.casaErrors[params.namePrefix] %}
{% set visibleErrorMessage = t(params.casaErrors[params.namePrefix][0].inline, params.casaErrors[params.namePrefix][0].variables) %}
{% elif params.casaErrors[params.namePrefix + '[mm]'] %}
{% set visibleErrorKey = params.namePrefix + '[mm]' %}
{% set visibleErrorMessage = t(params.casaErrors[visibleErrorKey][0].inline, params.casaErrors[visibleErrorKey][0].variables) %}
{% elif params.casaErrors[params.namePrefix + '[yyyy]']%}
{% set visibleErrorKey = params.namePrefix + '[yyyy]' %}
{% set visibleErrorMessage = t(params.casaErrors[visibleErrorKey][0].inline, params.casaErrors[visibleErrorKey][0].variables) %}
{% endif %}
{% if visibleErrorMessage %}
{% set visibleError = {text: visibleErrorMessage} %}
{% else %}
{% set visibleError = null %}
{% endif %}
{# Merge parameters #}
{% set mergedParams = mergeObjects(params, {
  id: params.id if params.id else 'f-' + params.namePrefix,
  namePrefix: '',
  attributes: mergedAttributes,
  items: [
    mergeObjectsDeep({
      label: t('macros:dateInput.month'),
      classes: 'govuk-input--width-2 ' + (inputErrorClass if includes(fieldErrors[0].focusSuffix, '[mm]') or not hasSuffixHighlights)
    }, params.items[0] if params.items[0] else {}, {
      id: 'f-' + params.namePrefix + '[mm]',
      name: params.namePrefix + '[mm]',
      value: params.casaValue.mm
    }),
    mergeObjectsDeep({
      label: t('macros:dateInput.year'),
      classes: 'govuk-input--width-4 ' + (inputErrorClass if includes(fieldErrors[0].focusSuffix, '[yyyy]') or not hasSuffixHighlights)
    }, params.items[1] if params.items[1] else {}, {
      id: 'f-' + params.namePrefix + '[yyyy]',
      name: params.namePrefix + '[yyyy]',
      value: params.casaValue.yyyy
    })
  ],
  errorMessage: visibleError
}) %}


{# Render template #}
{#- a record of other elements that we need to associate with the input using
   aria-describedby â€“ for example hints or error messages -#}
{% set describedBy = mergedParams.fieldset.describedBy if mergedParams.fieldset.describedBy else "" %}

{% if mergedParams.items | length %}
  {% set dateInputItems = mergedParams.items %}
{% else %}
  {% set dateInputItems = [
    {
      name: "month",
      classes: "govuk-input--width-2"
    },
    {
      name: "year",
      classes: "govuk-input--width-4"
    }
  ] %}
{% endif %}

{#- Capture the HTML so we can optionally nest it in a fieldset -#}
{% set innerHtml %}
{% if mergedParams.hint %}
  {% set hintId = mergedParams.id + "-hint" %}
  {% set describedBy = describedBy + " " + hintId if describedBy else hintId %}
  {{ govukHint({
    id: hintId,
    classes: mergedParams.hint.classes,
    attributes: mergedParams.hint.attributes,
    html: mergedParams.hint.html,
    text: mergedParams.hint.text
  }) | indent(2) | trim }}
{% endif %}
{% if mergedParams.errorMessage %}
  {% set errorId = mergedParams.id + "-error" %}
  {% set describedBy = describedBy + " " + errorId if describedBy else errorId %}
  {{ govukErrorMessage({
    id: errorId,
    classes: mergedParams.errorMessage.classes,
    attributes: mergedParams.errorMessage.attributes,
    html: mergedParams.errorMessage.html,
    text: mergedParams.errorMessage.text,
    visuallyHiddenText: mergedParams.errorMessage.visuallyHiddenText
  }) | indent(2) | trim }}
{% endif %}
  <div class="govuk-date-input {%- if mergedParams.classes %} {{ mergedParams.classes }}{% endif %}"
    {%- for attribute, value in mergedParams.attributes %} {{attribute}}="{{value}}"{% endfor %}
    {%- if mergedParams.id %} id="{{ mergedParams.id }}"{% endif %}>
    {% for item in dateInputItems %}
    <div class="govuk-date-input__item">
      {{ govukInput({
        label: {
          text: item.label if item.label else item.name | capitalize,
          classes: "govuk-date-input__label"
        },
        id: item.id if item.id else (mergedParams.id + "-" + item.name),
        classes: "govuk-date-input__input " + (item.classes if item.classes),
        name: (mergedParams.namePrefix + "-" + item.name) if mergedParams.namePrefix else item.name,
        value: item.value,
        type: "text",
        inputmode: "numeric",
        autocomplete: item.autocomplete,
        pattern: item.pattern if item.pattern else "[0-9]*",
        attributes: item.attributes
      }) | indent(6) | trim }}
    </div>
  {% endfor %}
  </div>
{% endset %}

<div class="govuk-form-group {%- if mergedParams.errorMessage %} govuk-form-group--error{% endif %} {%- if mergedParams.formGroup.classes %} {{ mergedParams.formGroup.classes }}{% endif %}">
{% if mergedParams.fieldset %}
{#- We override the fieldset's role to 'group' because otherwise JAWS does not
    announce the description for a fieldset comprised of text inputs, but
    adding the role to the fieldset always makes the output overly verbose for
    radio buttons or checkboxes. -#}
  {% call govukFieldset({
    describedBy: describedBy,
    classes: mergedParams.fieldset.classes,
    role: 'group',
    attributes: mergedParams.fieldset.attributes,
    legend: mergedParams.fieldset.legend
  }) %}
  {{ innerHtml | trim | safe }}
  {% endcall %}
{% else %}
  {{ innerHtml | trim | safe }}
{% endif %}
</div>
{% endmacro %}
